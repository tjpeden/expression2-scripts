@name Car Alarm v2
@persist [Car Events]:table Altitude

if( first() ) {
    runOnTick(1)
    
    #include "lib/obfuscate"
    #include "lib/entity"
    #include "lib/event"
    
    function table newCar(Height, Thrust) {
        local Car = table()
        local Self = entity()
        local Base = Self:isWeldedTo()
        local Owner = Base:owner()
        
        Base:setMass(1000)
        Self:setMass(0.0001)
        Self:setColor(vec(0,128,0), 192)
        
        Car["Self", entity] = Self
        Car["Base", entity] = Base
        Car["Owner", entity] = Owner
        Car["Height", number] = Height
        Car["Thrust", number] = Thrust
        
        return Car
    }
    
    function table:carThink() {
        local Base = Car["Base", entity]
        local Owner = Car["Owner", entity]
        local Driver = Base:driver()
        local Distance = Owner:pos():distance( Base:pos() )
        local Differance = Car:current("Height") - Base:altitude()
        
        Thrust = vec()
        
        Car:update("Lock", !(Driver | Distance <= 100))
        Car:update("Reload", Driver:keyReload() )
        Car:update("Attack1", Driver:keyAttack1() )
        Car:update("Space", Driver)
        
        Events:eventsThink()
        
        Base:hoverRight(Thrust, 0, Differance)
        Base:upRight(0)
    }
    
    function playVehicleSound(Args:table) {
        local File = Args:popString()
        local Base = Car["Base", entity]
        
        Base:soundPlay(2, 0, File)
    }
    
    function handleLockChange() { 
        local Base = Car["Base", entity]
        
        Base:lockPod(Car:current("Lock"))
    }
    
    function toggleFloat() {
        local Base = Car["Base", entity]
        
        Car:update("Height", Base:pos():z())
        Car:toggle("Float")
    }
    
    function applyThrust() {
        local Base = Car["Base", entity]
        
        Force += ( Base:forward() * Car:current("Thrust") ):setZ(0)
    }
    
    function setup() {
        Car = newCar(-1, 10000)
    }
    
    setup()
}

if(!Events) {
    Events = newEvents(Car)
    
    Events:on("Lock", "rise", "playVehicleSound", table("common/bugreporter_succeeded.wav"))
    Events:on("Lock", "fall", "playVehicleSound", table("common/warning.wav"))
    Events:on("Lock", "change", "handleLockChange")
    Events:on("Reload", "rise", "toggleFloat")
    Events:on("Attack1", "high", "applyThrust")
}
