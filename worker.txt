@name Worker
@outputs Debug:vector
@persist MyWorker:table

if(first()) {
    runOnTick(1)
    
    function void table:update(Key:string, Value) {
        This["$"+Key, number] = Value - This[Key, number]
        This[Key, number] = Value
    }
    
    function number table:current(Key:string) {
        return This[Key, number]
    }
    
    function number table:delta(Key:string) {
        return This["$"+Key, number]
    }
    
    function number table:hasRisen(Key:string) {
        return This:delta(Key) == 1
    }
    
    function number table:hasFallen(Key:string) {
        return This:delta(Key) == -1
    }
    
    function number entity:hasWeapon(Weapon:string) {
        return This:weapon():type() == Weapon
    }
    
    function number entity:altitude() {
        rangerFlags("WEZ")
        rangerFilter(This)
        local RD = rangerOffset(99999, This:pos(), -This:up())
        return RD:distance()
    }
    
    function void entity:setPosition(V:vector2) {
        This["Position", vector2] = V
    }
    
    function void entity:setPosition(V:vector) {
        This:setPosition( vec2(V) )
    }
    
    function void entity:upRight(Target:angle) {
        local Pos = This:pos()
    
        local TarQ = quat(Target)
        local CurQ = quat(This)
        
        local Q = TarQ/CurQ
        local V = This:toLocal( rotationVector( Q ) + Pos )
        This:applyTorque( ( 150 * V - 12 * This:angVelVector() ) * This:inertia() )
    }
    
    function void entity:hover(Z, ZDelta, Gravity) {
        local Diff = This["Position", vector2] - vec2( This:pos() )
        local Dir = ( vec(Diff) - This:vel() ) * This:mass()
        This:applyForce( Dir + vec(0,0,Z) + vec(0,0,ZDelta) * 5 + vec(0,0,-Gravity) )
    }
    
    function void table:hover(Height) {
        local Base = This["Base", entity]
        local Data = This["Data", table]
        
        Data:update("Z", (Height - Base:altitude()) * 7000)
        Base:hover(Data:current("Z"), Data:delta("Z"), 14000)
        Base:upRight(ang(0,0,0))
    }
    
    function void table:think() {
        local Base = This["Base", entity]
        local Data = This["Data", table]
        local Owner = This["Owner", entity]
        
        Data:update("Use", Owner:keyUse())
        Data:update("Reload", Owner:keyReload())
        Data:update("Attack1", Owner:keyAttack1())
        Data:update("Attack2", Owner:keyAttack2())
        
        if(Data:hasRisen("Reload") & Owner:hasWeapon("weapon_crowbar")) { Base:setPosition( Owner:aimPos() ) }
    }
    
    function void table:work() {
        local Base = This["Base", entity]
        This:think()
        This:hover(100)
    }
    
    function table newWorker() {
        local Worker = table()
        local Base = entity():isWeldedTo()
        
        Base:setMass(1000)
        
        Worker["Base", entity] = Base
        Worker["Owner", entity] = owner()
        Worker["Data", table] = table()
        
        Base:setPosition( Base:pos() )
        
        return Worker
    }
    
    MyWorker = newWorker()
}

MyWorker:work()
