@name Car Alarm v2
@persist [Car Events Env]:table Altitude
@outputs Car:table

#[
    Author: TJ Peden
    License: MIT
]#

if( first() ) {
    runOnTick( 1 )
    runOnChat( 1 )

    #include "sources/lib/obfuscate"
    #include "sources/lib/constants"
    #include "sources/lib/command"
    #include "sources/lib/entity"
    #include "sources/lib/event"

    function table newCar(Height, Thrust) {
        local Car = table()
        local Self = entity()
        local Base = Self:isWeldedTo()
        local Owner = Base:owner()

        Self:setMass( 1 )
        Self:setColor( vec( 0,128,0 ), 192 )

        Car["Self", entity] = Self
        Car["Base", entity] = Base
        Car["Owner", entity] = Owner
        Car["Height", number] = Height
        Car["Thrust", number] = Thrust
        Car["Lift", number] = 0
        Car["Float", number] = 0

        printColor( Cyan, "Car Alarm created" )
        return Car
    }

    function table:carThink() {
        local Base = Car["Base", entity]
        local Owner = Car["Owner", entity]
        local Driver = Base:driver()
        local Distance = Owner:pos():distance( Base:pos() )

        Car:update( "Lift", 0 )
        Car:update( "Altitude", Base:altitude() )
        Car:update( "Difference", Car:current( "Height" ) - Car:current( "Altitude" ) )
        Car:update( "Lock", !(Driver | Distance <= 100) )
        Car:update( "Reload", Driver:keyReload() )
        Car:update( "Attack1", Driver:keyAttack1() )
        Car:update( "Space", Driver )

        Events:eventsThink()

        Base:hoverForward( Car:current("Thrust"), Car:current( "Attack1" ), Car:current( "Lift" ) )
        Base:upRight( 0 )
    }

    function playVehicleSound(Args:table) {
        local File = Args:popString()
        local Base = Car["Base", entity]

        Base:soundPlay( 2, 0, File )
    }

    function handleLockChange() {
        local Base = Car["Base", entity]

        Base:lockPod( Car:current( "Lock" ) )
    }

    function toggleFloat() {
        local Base = Car["Base", entity]

        Car:toggle( "Float" )
        Car:update( "Height", Base:altitude() * Car:current( "Float" ) )
    }

    function applyVerticalThrust() {
        local Base = Car["Base", entity]
        local InAir = Car:current( "Difference" ) > 0

        Car:update( "Lift", ( vec( 0, 0, 1/66 ) * Base:mass() * gravity() * !InAir ):z() )
    }
    
    function applyHover() {
        local Base = Car["Base", entity]
        
        Car:update( "Lift", ( Car:current( "Difference" ) - Base:vel():z() ) * Base:mass() )
    }
    
    function cmdDebug(Args:table, Ret:table) {
        printTable( Car )
    }

    function setup() {
        Car = newCar( -1, 10000 )
                
        Events = newEvents(Car)
    
        Events:on( "Lock",    "rise",   "playVehicleSound", table( "common/bugreporter_succeeded.wav" ) )
        Events:on( "Lock",    "fall",   "playVehicleSound", table( "common/warning.wav" ) )
        Events:on( "Lock",    "change", "handleLockChange" )
        Events:on( "Reload",  "rise",   "toggleFloat" )
        Events:on( "Space",   "high",   "applyVerticalThrust" )
        Events:on( "Float",   "high",   "applyHover" )
        
        Env = newEnv( ":" )
        
        Env:envAddCommand( newCommand( "debug", "cmdDebug", "" ) )
    }

    setup()
}

if( chatClk() ) { Env:envExec( lastSaid() ) }

if( tickClk() ) { Car:carThink() }
