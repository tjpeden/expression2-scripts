@name Weapons Chair v2
@inputs [Pod Camera]:wirelink
@outputs Ops Maxquota
@persist [Self Events Env]:table

#[
    Author: TJ Peden
    License: MIT
]#

if( first() ) {
    runOnTick( 1 )
    runOnChat( 1 )

    #include "sources/lib/obfuscate"
    #include "sources/lib/constants"
    #include "sources/lib/command"
    #include "sources/lib/entity"
    #include "sources/lib/event"

    function void handleActiveRise() {
        local Base = Pod:entity()
        local CamEnt = Camera:entity()

        Self["Base", entity] = Base
        Self["CamEnt", entity] = CamEnt

        Camera["Parent", entity] = Base
    }

    function void handleActiveFall() {
        Self:update( "View", Off )

        dsSend( "Activate", "Weapons", Off )
    }

    function void handleToggleView() {
        Self:toggle( "View" )
    }

    function void handleViewChanged() {
        local View = Self:current( "View" )

        Camera["Activated", number] = View

        dsSend( "Activate", "Weapons", View )
    }

    function void handleView() {
        if( maxquota() <= 10000 ) { return }

        local CamEnt = Self["CamEnt", entity]
        local Position = CamEnt:pos() + vec( 0, 0, 120 )
        local Angle = ang( -Pod["Elevation", number], Pod["Bearing", number], 0 )
        local Direction = Angle:forward()
        local Ranger = rangerOffset( 4096, Position, Direction )

        Self["Ranger", ranger] = Ranger

        Camera["Angle", angle] = Angle
        Camera["Position", vector] = Position

        dsSend( "Target.Position", "Weapons", Ranger:pos() )
    }

    function void handleCriticalUpdate() {
        Self:update( "Lock", Self["Target", entity]:isValid() )
    }

    function void handleTargetLost() {
        dsSend( "Fire", "Weapons", Off )
    }

    function void handleAquireTarget() {
        local Target = Self["Ranger", ranger]:entity()

        printColor( Red, Target:model() )
        Self["Target", entity] = Target

        dsSend( "Target", "Weapons", Target )
    }

    function void handleFireWeapons() {
        dsSend( "Fire", "Weapons", Self:current( "Mouse1" ) )
    }

    function table new() {
        local Self = table()

        Self["Active", number] = Off
        Self["View",   number] = Off
        Self["Lock",   number] = Off

        return Self
    }

    function void table:act() {
        Self:update( "Active", Pod )
        Self:update( "Mouse1", Pod )
        Self:update( "Mouse2", Pod )
        Self:update( "Alt",    Pod )

        Events:eventsThink()
    }

    function cmdDebug(Args:table, Ret:table) {
        printTable( Self )
        print()

        if( Self:exists( "Ranger" ) ) {
            printTable( Self["Ranger", ranger]:toTable() )
        }
    }

    function void setup() {
        Self = new()

        Events = newEvents(Self)

        Events:on( "Active", "rise",   "handleActiveRise" )
        Events:on( "Active", "fall",   "handleActiveFall" )
        Events:on( "Alt",    "rise",   "handleToggleView" )
        Events:on( "View",   "change", "handleViewChanged" )
        Events:on( "View",   "high",   "handleView" )
        Events:on( "Active", "high",   "handleCriticalUpdate" )
        Events:on( "Lock",   "fall",   "handleTargetLost" )
        Events:on( "Mouse2", "rise",   "handleAquireTarget" )
        Events:on( "Mouse1", "change", "handleFireWeapons" )

        Env = newEnv( ":" )

        Env:envAddCommand( newCommand( "debug", "cmdDebug", "" ) )

        Pod["Crosshairs", number] = On
    }

    setup()
}

Ops = ops()
Maxquota = maxquota()

if( chatClk() ) { Env:envExec( lastSaid() ) }

if( !->Pod | !->Camera ) { exit() }

if( dsClk( "Target.Aquired" ) ) {
    printColor( Green, dsGetSender():getName() + " target aquired" )
}

if( tickClk() ) { Self:act() }
