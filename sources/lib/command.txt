@name libCommand

#Command parsing library

#Run-down on signatures: a signature is a string in which each character represents a datatype
#to be accepted by the function. Due to limitations, the function always gets a table-array, but
#nonetheless the array elements are of the appropriate type. The usable characters are as
#follows (case sensitive):
#s: A string.
#p: A player, by name or name fragment, or noentity() if not found.
#n: A number.
#O: Optional. Arguments past this aren't required and shouldn't raise an error if not present.
#r: The rest of the buffer (with quotes removed).
#Your function will receive two arguments. The first is a table-array formatted as above; the second
#is the return table. This is primarily so the function can return custom error codes by setting
#Success[number] to 0 and Reason[string] to a reason why it failed.

#include "sources/lib/string"

function table argsparse(Parts:table, Signature:string) {
    local Optional=0
    local Ret=table()
    Ret["Success", number]=0
    for(I=1,Signature:length()) {
        local Char=Signature:index(I)
        if(Parts:count()<1) {
            Ret["Reason", string]="Not enough parameters"
            return Ret #With Success=0 if not in optional
        }
        if(Char=="s") {
            Ret:pushString(Parts:removeString(1))
        } elseif(Char=="p") {
            Ret:pushEntity(findPlayerByName(Parts:removeString(1)))
        } elseif(Char=="n") {
            Ret:pushNumber(Parts:removeString(1):toNumber())
        } elseif(Char=="O") {
            Optional=1
            Ret["Success", number]=1
        } elseif(Char=="r") {
            local Buf=""
            for(I=1,Parts:count()) {
                Buf=Buf+Parts[I, string]
            }
            Ret:pushString(Buf)
            Ret["Success", number]=1
            return Ret
        } else {
            Ret["Reason", string]="Invalid signature specifier: "+Char
            Ret["Success", number]=0
            return Ret
        }
    }
    Ret["Success", number]=1
    return Ret
}

function table newCommand(Name:string, Func:string, Signature:string) {
    local RetT=table()
    RetT["Name", string]=Name
    RetT["Func", string]=Func
    RetT["Signature", string]=Signature
    return RetT
}
function string table:cmName() {
    return This["Name", string]
}

function string table:cmFunc() {
    return This["Func", string]
}

function string table:cmSignature() {
    return This["Signature", string]
}

function void table:cmSetName(Name:string) {
    This["Name", string]=Name
}

function void table:cmSetFunc(Func:string) {
    This["Func", string]=Func
}

function void table:cmSetSignature(Signature:string) {
    This["Signature", string]=Signature
}

function void table:cmSetPrefix(Prefix:string) {
    This["Prefix", string]=Prefix
}

function table table:cmTry(Parts:table) {
    local Name=This:cmName()
    local Ret=table()
    local QName=Name
    local QName2=entity():id():toString()+":"+Name
    Ret["Handled", number]=0
    if(Parts[1, string]==QName|Parts[1, string]==QName2) {
        Ret["Handled", number]=1
        Parts:removeString(1) #Remove the command
        local Args=argsparse(Parts, This:cmSignature())
        Ret["Success", number]=Args["Success", number]
        Ret["Reason", string]=Args["Reason", string]
        if(!Ret["Success", number]) {
            return Ret
        }
        This:cmFunc()(Args, Ret) #Ret is passed to allow the function to set a custom error reason
        return Ret
    }
    return Ret
}

function table newEnv(Prefix:string) {
    local RetT=table()
    RetT["Prefix", string]=Prefix
    return RetT
}

function table newEnv() {
    return newEnv("!")
}

function string table:envPrefix() {
    return This["Prefix", string]
}

function table:envAddCommand(Command:table) {
    This:pushTable(Command)
}

function number table:envExec(Buffer:string) {
    local Prefix=This:envPrefix()
    if(Buffer:left(Prefix:length())!=Prefix) {
        return 0
    }
    Buffer=Buffer:sub(Prefix:length()+1)
    local Parts=qsplit(Buffer)
    for(I=1,This:count()) {
        local Command=This[I, table]
        local Status=Command:cmTry(Parts)
        if(Status["Handled", number]) {
            if(!Status["Success", number]) {
                printColor(vec(255, 0, 0), "Command error: "+Status["Reason", string])
            }
            return 1
        }
    }
    return 0
}
